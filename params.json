{"name":"ConfigurationAssist","tagline":"A project to simplify reading app/web config files in .Net","body":"# Description\r\n\r\nCurrently ConfigurationAssist supports the following:\r\n\r\n* Mapping AppSettings to Config Classes\r\n* Mapping Config Sections in Groups to the below types:\r\n * Mapping Config Sections to custom ConfigurationSection typed Config Classes\r\n * Mapping Config Sections that use NameValueSectionHandler\r\n * Mapping Config Sections that use DictionarySectionHandler\r\n * Mapping Config Sections that use SingleTagSectionHandler\r\n\r\nIts often convenient to split app/web.config keys into logical groupings. This is where Configuration Sections come in handy. Its long supported feature of .Net but can be a little tedious if you want to strongly type the section.\r\n\r\nConfigurationAssist is here to help remove the CRUD involved in using config sections on strongly typed objects.\r\nIt will also allow mapping to the keys in AppSetting and remove the tedium of converting the keys to other primitive types.\r\n\r\n# How to use it\r\n\r\nI have set up some basic examples and explanations in the sub pages:\r\n\r\n[AppSettings](https://github.com/JeremyBOB81/ConfigurationAssist/wiki/AppSettings)\r\n\r\n[Sections - Simple](https://github.com/JeremyBOB81/ConfigurationAssist/wiki/Sections---Simple)\r\n\r\n[Sections - Grouped](https://github.com/JeremyBOB81/ConfigurationAssist/wiki/Sections---Grouped)\r\n\r\n[Non-String Values](https://github.com/JeremyBOB81/ConfigurationAssist/wiki/Non-String-Values)\r\n\r\n[Section Types and Strategies Explained](https://github.com/JeremyBOB81/ConfigurationAssist/wiki/Section-Types-and-Strategies-Explained)\r\n\r\n# Installation\r\n\r\nConfigurationAssist is currently available on NuGet.\r\n```\r\nPM> Install-Package ConfigurationAssist\r\n```\r\nIt currently supports the .NET Framework 3.5+\r\n\r\n# Upcoming\r\n\r\n## Cleaner Section Group Mapping\r\n\r\nCurrently the recommended way to map a section group is to use the provided ```ConfigurationSectionItem(sectionName, sectionGroup)``` attribute. The down side with this is that it forces the developer to capture the section name. I want to make both the section name and the sectionGroup optional parameters. This means we can specify only the sectionGroup if we want, and the section Name will use the class name for mapping.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}